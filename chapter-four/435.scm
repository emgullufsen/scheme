;; Exercise 4.35

(define (require p)
  (if (not p) (amb)))

(define (distinct? l)
  (if (null? l)
      true
      (let ((f (car l)) (s (cdr l)))
	    (if (null? s)
		true
		(let ((fs (car s)))
		      (if (= f fs)
			  false
			  (distinct? s)))))))

(define (an-integer-between l h)
 (require (<= l h))
 (amb l (an-integer-between (+ l 1) h)))

(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high)))
    (let ((j (an-integer-between i high)))
      (let ((k (an-integer-between j high)))
        (require (= (+ (* i i) (* j j)) 
                    (* k k)))
        (list i j k)))))

     (define (multiple-dwelling)
       (let ((baker (amb 1 2 3 4 5))
             (cooper (amb 1 2 3 4 5))
             (fletcher (amb 1 2 3 4 5))
             (miller (amb 1 2 3 4 5))
             (smith (amb 1 2 3 4 5)))
         (require
          (distinct? (list baker cooper fletcher miller smith)))
         (require (not (= baker 5)))
         (require (not (= cooper 1)))
         (require (not (= fletcher 5)))
         (require (not (= fletcher 1)))
         (require (> miller cooper))
         (require (not (= (abs (- smith fletcher)) 1)))
         (require (not (= (abs (- fletcher cooper)) 1)))
         (list (list 'baker baker)
               (list 'cooper cooper)
               (list 'fletcher fletcher)
               (list 'miller miller)
               (list 'smith smith))))

(define (liars-test)
  (let ((a (amb 1 2 3))
        (b (amb 1 2 3)))
    (require (distinct? (list a b)))
    (list a b)))

(define (liars-test-2)
  (let ((a (amb 1 2 3))
        (b (amb 1 2 3)))
    (require (distinct? (list a b)))
    (require (exor (= a 1) (= b 2)))
    (list a b)))

;; exercise 4.42
(define (liars-puzzle)
  (let ((betty (amb 1 2 3 4 5))
        (ethel (amb 1 2 3 4 5))
        (joan (amb 1 2 3 4 5))
        (kitty (amb 1 2 3 4 5))
        (mary (amb 1 2 3 4 5)))
    (require 
     (distinct? (list betty ethel joan kitty mary)))
    (require (exor (= kitty 2) (= betty 3)))
    (require (exor (= ethel 1) (= joan 2)))
    (require (exor (= joan 3) (= ethel 5)))
    (require (exor (= kitty 2) (= mary 4)))
    (require (exor (= mary 4) (= betty 1)))
    (list (list 'betty betty)
          (list 'ethel ethel)
          (list 'joan joan)
          (list 'kitty kitty)
          (list 'mary mary))))
