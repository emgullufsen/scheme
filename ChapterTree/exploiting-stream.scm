(define (stream-limit-protected in-stream tolerance n)
  (if (< n 1)
      (error "lim exceeded")
      (let* ((scar (stream-car in-stream)) (scdr (stream-car (stream-cdr in-stream))) (tolly (abs (- scar scdr))))
	(if (< tolly tolerance)
	    scdr
	    (stream-limit-protected (stream-cdr in-stream) tolerance (- n 1))))))

(define (stream-limit in-stream tolerance)
  (stream-limit-protected in-stream tolerance 5000))

(define (sqrt-improve guess x)
  (average guess (/ x guess)))

(define (sqrt-stream x)
  (define guesses
    (cons-stream 
     1.0 (stream-map
          (lambda (guess)
            (sqrt-improve guess x))
          guesses)))
  guesses)

(define (pi-summands n) (cons-stream (/ 1.0 n)
				     (stream-map - (pi-summands (+ n 2)))))
(define (ln2-summands n) (cons-stream (/ 1.0 n)
				     (stream-map - (ln2-summands (+ n 1)))))

(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream 
       (stream-car s1)
       (interleave s2 (stream-cdr s1)))))

(define (isPrime x)
  (define (isPrimeHelper i j)
    (if (= i j)
	#t
	(if (= (remainder j i) 0)
	    #f
	    (isPrimeHelper (+ i 1) j))))
  (isPrimeHelper 2 x))

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) 
                  (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

(define (how-many-preceding? STREAM PAIR)
  (define (hmp-helper n s in-list)
    (let* ((in0 (car in-list))
	   (in1 (cadr in-list))
	   (el (stream-car s))
	   (el0 (car el))
	   (el1 (cadr el)))
    (if (and
       (= in0 el0)
       (= in1 el1))
	n
	(hmp-helper (+ n 1) (stream-cdr s) in-list))))
  (hmp-helper 0 STREAM PAIR))
