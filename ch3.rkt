#lang scheme
(define (gcd a b)
    (if (= b 0) a (gcd b (remainder a b))))
(define (make-accumulator initial-amount)
    (lambda (n) 
        (begin (set! initial-amount (+ initial-amount n)) initial-amount)))

(define (make-monitored fn) 
    (let ((counter 0))
        (define (mf inp)
            (cond ((eq? inp 'how-many-calls?) counter)
                  ((eq? inp 'reset-count) (set! counter 0))
                  (else (begin (set! counter (+ counter 1)) (fn inp)))))
        mf))

(define (make-account balance pwd)
    (let ((access-counter 0))
        (define (withdraw amount)
            (if (>= balance amount)
                (begin (set! balance (- balance amount)) balance)
                "Insufficient funds"))
        (define (deposit amount)
            (set! balance (+ balance amount))
            balance)
        (define (dispatch p m)
            (if (eq? p pwd)
                (begin (set! access-counter 0)
                       (cond ((eq? m 'withdraw) withdraw)
                             ((eq? m 'deposit) deposit)
                             (else (error "Unknown request: MAKE-ACCOUNT" m))))
                (if (> access-counter 2) 
                    (begin (call-the-cops) (error "Exceeded MAX-PASSWORD-INCORRECT!"))
                    ((set! access-counter (+ access-counter 1))
                     (error "Bad password: MAKE-ACCOUNT" m)))))
    dispatch))

(define (call-the-cops) (display "you did it now bud!"))

(define random-max (expt 2 31))
(define random-init 13)
(define a 1664525)
(define b 1013904223)
(define m (expt 2 32))
(define rand-update (lambda (x) (remainder (+ (* a x) b) m)))

(define rand
  (let ((x random-init))
    (lambda () (set! x (rand-update x)) x)))

(define (random-in-range low high)
    (let ((range (- high low)))
        (+ low (random range))))

(define (estimate-integral P x1 x2 y1 y2)
    (define the-experiment 
        (lambda () (let ((ran-x (random-in-range x1 x2)) (ran-y (random-in-range y1 y2)))
                        (P ran-x ran-y))))
    (* (monte-carlo (expt 2 22) the-experiment) 4))

(define in-unit-100K-circle? (lambda (x y) (< (+ (expt x 2) (expt y 2)) (expt 100000 2))))

(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (cesaro-test)
   (= (gcd (random random-max) (random random-max)) 1))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) 
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) 
                 trials-passed))))
  (iter trials 0))
