#lang scheme
(define (make-accumulator initial-amount)
    (lambda (n) 
        (begin (set! initial-amount (+ initial-amount n)) initial-amount)))

(define (make-monitored fn) 
    (let ((counter 0))
        (define (mf inp)
            (cond ((eq? inp 'how-many-calls?) counter)
                  ((eq? inp 'reset-count) (set! counter 0))
                  (else (begin (set! counter (+ counter 1)) (fn inp)))))
        mf))

(define (make-account balance pwd)
    (let ((access-counter 0))
        (define (withdraw amount)
            (if (>= balance amount)
                (begin (set! balance (- balance amount)) balance)
                "Insufficient funds"))
        (define (deposit amount)
            (set! balance (+ balance amount))
            balance)
        (define (dispatch p m)
            (if (eq? p pwd)
                (begin (set! access-counter 0)
                       (cond ((eq? m 'withdraw) withdraw)
                             ((eq? m 'deposit) deposit)
                             (else (error "Unknown request: MAKE-ACCOUNT" m))))
                (if (> access-counter 2) 
                    (begin (call-the-cops) (error "Exceeded MAX-PASSWORD-INCORRECT!"))
                    ((set! access-counter (+ access-counter 1))
                     (error "Bad password: MAKE-ACCOUNT" m)))))
    dispatch))

(define (call-the-cops) (display "you did it now bud!"))